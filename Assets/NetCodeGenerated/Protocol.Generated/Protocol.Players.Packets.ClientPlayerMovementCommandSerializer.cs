//THIS FILE IS AUTOGENERATED BY GHOSTCOMPILER. DON'T MODIFY OR ALTER.
using AOT;
using Unity.Burst;
using Unity.Networking.Transport;
using Unity.Entities;
using Unity.Collections;
using Unity.NetCode;
using Unity.Transforms;
using Unity.Mathematics;
using Protocol.Players.Packets;


namespace Protocol.Generated
{
    public struct ProtocolPlayersPacketsClientPlayerMovementCommandSerializer : ICommandDataSerializer<Protocol.Players.Packets.ClientPlayerMovementCommand>
    {
        public void Serialize(ref DataStreamWriter writer, in Protocol.Players.Packets.ClientPlayerMovementCommand data)
        {
            writer.WriteUInt(data.playerId);
            writer.WriteUInt(data.networkEntityId);
            writer.WriteUInt(data.createdTick);
            writer.WriteFloat(data.position.x);
            writer.WriteFloat(data.position.y);
            writer.WriteFloat(data.position.z);
            writer.WriteFloat(data.rotation.value.x);
            writer.WriteFloat(data.rotation.value.y);
            writer.WriteFloat(data.rotation.value.z);
            writer.WriteFloat(data.rotation.value.w);
            writer.WriteInt((int) data.velocity.x);
            writer.WriteInt((int) data.velocity.y);
        }

        public void Deserialize(ref DataStreamReader reader, ref Protocol.Players.Packets.ClientPlayerMovementCommand data)
        {
            data.playerId = (uint) reader.ReadUInt();
            data.networkEntityId = (uint) reader.ReadUInt();
            data.createdTick = (uint) reader.ReadUInt();
            data.position.x = reader.ReadFloat();
            data.position.y = reader.ReadFloat();
            data.position.z = reader.ReadFloat();
            data.rotation.value.x = reader.ReadFloat();
            data.rotation.value.y = reader.ReadFloat();
            data.rotation.value.z = reader.ReadFloat();
            data.rotation.value.w = reader.ReadFloat();
            data.velocity.x = (int) reader.ReadInt();
            data.velocity.y = (int) reader.ReadInt();
        }

        public void Serialize(ref DataStreamWriter writer, in Protocol.Players.Packets.ClientPlayerMovementCommand data, in Protocol.Players.Packets.ClientPlayerMovementCommand baseline, NetworkCompressionModel compressionModel)
        {
            writer.WritePackedUIntDelta(data.playerId, baseline.playerId, compressionModel);
            writer.WritePackedUIntDelta(data.networkEntityId, baseline.networkEntityId, compressionModel);
            writer.WritePackedUIntDelta(data.createdTick, baseline.createdTick, compressionModel);
            writer.WritePackedFloatDelta(data.position.x, baseline.position.x, compressionModel);
            writer.WritePackedFloatDelta(data.position.y, baseline.position.y, compressionModel);
            writer.WritePackedFloatDelta(data.position.z, baseline.position.z, compressionModel);
            writer.WritePackedFloatDelta(data.rotation.value.x, baseline.rotation.value.x, compressionModel);
            writer.WritePackedFloatDelta(data.rotation.value.y, baseline.rotation.value.y, compressionModel);
            writer.WritePackedFloatDelta(data.rotation.value.z, baseline.rotation.value.z, compressionModel);
            writer.WritePackedFloatDelta(data.rotation.value.w, baseline.rotation.value.w, compressionModel);
            writer.WritePackedIntDelta((int) data.velocity.x, (int) baseline.velocity.x, compressionModel);
            writer.WritePackedIntDelta((int) data.velocity.y, (int) baseline.velocity.y, compressionModel);
        }

        public void Deserialize(ref DataStreamReader reader, ref Protocol.Players.Packets.ClientPlayerMovementCommand data, in Protocol.Players.Packets.ClientPlayerMovementCommand baseline, NetworkCompressionModel compressionModel)
        {
            data.playerId = (uint) reader.ReadPackedUIntDelta(baseline.playerId, compressionModel);
            data.networkEntityId = (uint) reader.ReadPackedUIntDelta(baseline.networkEntityId, compressionModel);
            data.createdTick = (uint) reader.ReadPackedUIntDelta(baseline.createdTick, compressionModel);
            data.position.x = reader.ReadPackedFloatDelta(baseline.position.x, compressionModel);
            data.position.y = reader.ReadPackedFloatDelta(baseline.position.y, compressionModel);
            data.position.z = reader.ReadPackedFloatDelta(baseline.position.z, compressionModel);
            data.rotation.value.x = reader.ReadPackedFloatDelta(baseline.rotation.value.x, compressionModel);
            data.rotation.value.y = reader.ReadPackedFloatDelta(baseline.rotation.value.y, compressionModel);
            data.rotation.value.z = reader.ReadPackedFloatDelta(baseline.rotation.value.z, compressionModel);
            data.rotation.value.w = reader.ReadPackedFloatDelta(baseline.rotation.value.w, compressionModel);
            data.velocity.x = (int) reader.ReadPackedIntDelta((int) baseline.velocity.x, compressionModel);
            data.velocity.y = (int) reader.ReadPackedIntDelta((int) baseline.velocity.y, compressionModel);
        }
    }
    public class ProtocolPlayersPacketsClientPlayerMovementCommandSendCommandSystem : CommandSendSystem<ProtocolPlayersPacketsClientPlayerMovementCommandSerializer, Protocol.Players.Packets.ClientPlayerMovementCommand>
    {
        [BurstCompile]
        struct SendJob : IJobEntityBatch
        {
            public SendJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var sendJob = new SendJob{data = InitJobData()};
            ScheduleJobData(sendJob);
        }
    }
    public class ProtocolPlayersPacketsClientPlayerMovementCommandReceiveCommandSystem : CommandReceiveSystem<ProtocolPlayersPacketsClientPlayerMovementCommandSerializer, Protocol.Players.Packets.ClientPlayerMovementCommand>
    {
        [BurstCompile]
        struct ReceiveJob : IJobEntityBatch
        {
            public ReceiveJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var recvJob = new ReceiveJob{data = InitJobData()};
            ScheduleJobData(recvJob);
        }
    }
}
